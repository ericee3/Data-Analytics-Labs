theme_minimal()
# Plot log10_gdp vs ECO.new with regression line
p2 <- ggplot(epi.data, aes(x = log10_gdp, y = ECO.new)) +
geom_point(alpha = 0.6, color = "green") +
geom_smooth(method = "lm", color = "red", se = TRUE) +
ggtitle("ECO.new vs log10(GDP)") +
theme_minimal()
# Plot residuals for EPI.new model
residuals_epi <- data.frame(Fitted = fitted(lmod_22), Residuals = resid(lmod_22))
p3 <- ggplot(residuals_epi, aes(x = Fitted, y = Residuals)) +
geom_point(alpha = 0.6, color = "blue") +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
ggtitle("Residuals Plot for EPI.new Model") +
theme_minimal()
# Plot residuals for ECO.new model
residuals_eco <- data.frame(Fitted = fitted(lmod_2), Residuals = resid(lmod_2))
p4 <- ggplot(residuals_eco, aes(x = Fitted, y = Residuals)) +
geom_point(alpha = 0.6, color = "green") +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
ggtitle("Residuals Plot for ECO.new Model") +
theme_minimal()
# Plot residuals for Sub Region model
residuals_sub <- data.frame(Fitted = fitted(lmod_s1), Residuals = resid(lmod_s1))
p5 <- ggplot(residuals_sub, aes(x = Fitted, y = Residuals)) +
geom_point(alpha = 0.6, color = "blue") +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
ggtitle("Residuals Plot for Sub-Saharan Africa Model") +
theme_minimal()
# Plot log10_gdp vs ECO.new with regression line for sub region
p6 <- ggplot(subset_region1, aes(x = log10(gdp), y = EPI.new)) +
geom_point(alpha = 0.6, color = "green") +
geom_smooth(method = "lm", color = "red", se = TRUE) +
ggtitle("EPI.new vs log10(GDP) for Sub-Saharan Africa ") +
theme_minimal()
# Display plots
print(p1)
print(p2)
print(p3)
print(p4)
print(p5)
print(p6)
# Define the two regions
selected_regions <- c("Sub-Saharan Africa", "Latin America & Caribbean")
# Create the subset using base R
subset_data <- epi.data[epi.data$region %in% selected_regions, c("region", "SPI.new", "BER.new", "RLI.new")]
# View the first few rows of the subset
head(subset_data)
# Convert region to factor (for classification)
subset_data$region <- as.factor(subset_data$region)
## plot subset_data colored by class
ggplot(subset_data, aes(x = BER.new, y = RLI.new, colour = region)) +
geom_point()
# Split data into training (80%) and testing (20%)
set.seed(123)  # For reproducibility
train_index <- sample(1:nrow(subset_data), 0.8 * nrow(subset_data))
train_data <- subset_data[train_index, ]
test_data <- subset_data[-train_index, ]
# Extract features and labels
train_x <- train_data[, 2:4]  # Predictor variables
train_y <- train_data$region  # Response variable
test_x <- test_data[, 2:4]
test_y <- test_data$region
n <- 76
# simple estimate of k
k_v = round(sqrt(n))
k_v <- k_v
# Train and evaluate kNN model for different k values
k_values <- c(3, 9, 12)  # Try different k values
for (k in k_values) {
knn_pred <- knn(train_x, test_x, train_y, k = k)
# Compute confusion matrix
cm <- confusionMatrix(knn_pred, test_y)
# Accuracy calculation
accuracy <- sum(diag(cm$table)) / sum(cm$table)
print(paste("k =", k, "Accuracy =", round(accuracy, 3)))
print(cm)
}
## train model & predict in one step ('knn' function from 'class' library)
knn.predicted <- knn(train_x, test_x, train_y, k = 9)
# create contingency table/ confusion matrix
contingency.table <- table(knn.predicted, test_y, dnn=list('predicted','actual'))
contingency.table
# calculate classification accuracy
sum(diag(contingency.table))/length(test_y)
library("ggplot2")
library("readr")
library(readr)
library(class)      # For kNN
epi_results_2024_pop_gdp <- read_csv("/Users/elizabethrice/Desktop/Data Analytics Labs/Assignment2/epi_results_2024_pop_gdp_v2.csv")
View(epi_results_2024_pop_gdp)
epi.data <- epi_results_2024_pop_gdp
attach(epi.data)
View(epi.data)
# Check for NAN
sum(is.na(epi.data$population))
sum(is.na(epi.data$gdp))
sum(is.na(epi.data$EPI.new))
sum(is.na(epi.data$ECO.new))
sum(is.na(epi.data$BDH.new))
sum(is.na(epi.data$SPI.new))
sum(is.na(epi.data$BER.new))
sum(is.na(epi.data$RLI.new))
epi.data <- epi.data[!is.na(epi.data$population) &
!is.na(epi.data$gdp) &
!is.na(epi.data$SPI.new) &
!is.na(epi.data$BER.new) &
!is.na(epi.data$RLI.new), ]
# Display unique values from the 'region' column
unique_regions <- unique(epi.data$region)
# Print unique regions
print(unique_regions)
# Select two different regions
region1 <- unique_regions[4]
region2 <- unique_regions[5]
# Create subsets
subset_region1 <- subset(epi.data, region == region1)
subset_region2 <- subset(epi.data, region == region2)
# Print first few rows of each subset
print(head(subset_region1))
print(head(subset_region2))
# Check the shape of the first subset
dim(subset_region1)  # Returns c(number of rows, number of columns)
nrow(subset_region1) # Returns number of rows
ncol(subset_region1) # Returns number of columns
# Check the shape of the second subset
dim(subset_region2)
nrow(subset_region2)
ncol(subset_region2)
# Define the variable
variable <- "EPI.new"
# Plot histograms with density lines for both regions
p1 <- ggplot(subset_region1, aes(x = EPI.new)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "blue", alpha = 0.5) +
geom_density(color = "red", size = 1) +
ggtitle(paste("Histogram with Density -", region1)) +
theme_minimal()
p2 <- ggplot(subset_region2, aes(x = EPI.new)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "green", alpha = 0.5) +
geom_density(color = "red", size = 1) +
ggtitle(paste("Histogram with Density -", region2)) +
theme_minimal()
# Display plots
print(p1)
print(p2)
# Q-Q plot function
qq_plot <- function(data, region_name, variable) {
ggplot(data, aes(sample = get(variable))) +
stat_qq(distribution = qnorm) +  # Compare against a normal distribution
stat_qq_line(distribution = qnorm, color = "red") +
ggtitle(paste("Q-Q Plot -", region_name)) +
theme_minimal()
}
# Generate Q-Q plots for both regions
p1 <- qq_plot(subset_region1, region1, variable)
p2 <- qq_plot(subset_region2, region2, variable)
# Display plots
print(p1)
print(p2)
ggplot(epi.data, aes(x = log10(gdp), y = (ECO.new))) +
geom_point()
ggplot(epi.data, aes(x = log10(population), y = log10(ECO.new))) +
geom_point()
lmod_11 <- lm((EPI.new) ~ log10(population) + log10(gdp) , data = epi.data)
ggplot(epi.data, aes(x = log10(gdp), y = (ECO.new))) +
geom_point()
ggplot(epi.data, aes(x = log10(population), y = log10(ECO.new))) +
geom_point()
lmod_11 <- lm((EPI.new) ~ log10(population) + log10(gdp) , data = epi.data)
lmod_22 <- lm((EPI.new)~ log10(gdp), data = epi.data)
lmod_33 <- lm((EPI.new)~log10(population) , data = epi.data)
## print model output
summary(lmod_11)
summary(lmod_22)
# Scatter plot of log10(PROPERTYSQFT) vs log10(PRICE)
ggplot(dataset, aes(x = log10(PROPERTYSQFT), y = log10(PRICE))) +
geom_point()
# Filter extreme values from PRICE and remove outlier in PROPERTYSQFT
dataset <- dataset[dataset$PRICE < 195000000,]
dataset <- dataset[dataset$PROPERTYSQFT != 2184.207862,]
# Inspect specific PROPERTYSQFT values for a broker
dataset$PROPERTYSQFT[dataset$BROKERTITLE == "Brokered by Douglas Elliman - 575 Madison Ave"][85]
# Plot again after filtering
ggplot(dataset, aes(x = log10(PROPERTYSQFT), y = log10(PRICE))) +
geom_point()
# View column names
names(dataset)
# Explore relationships of predictors (BEDS, BATH) with PRICE
ggplot(dataset, aes(x = BEDS, y = PRICE)) +
geom_point()
ggplot(dataset, aes(x = BATH, y = PRICE)) +
geom_point()
# Additional filtering for outliers in PRICE, BEDS, and BATH
dataset <- dataset[dataset$PRICE < 24500000,]
dataset <- dataset[dataset$BEDS < 15,]
dataset <- dataset[dataset$BATH < 15,]
# Remove rows with missing, zero, or invalid values before taking logs
dataset <- dataset[!is.na(dataset$PRICE) &
!is.na(dataset$PROPERTYSQFT) &
!is.na(dataset$BEDS) &
!is.na(dataset$BATH) &
dataset$PROPERTYSQFT > 0 &
dataset$PRICE > 0, ]
# Check for missing or invalid log values
colSums(is.na(dataset))                      # Count missing values
sum(is.infinite(log10(dataset$PRICE)))       # Check for Inf in PRICE
sum(is.infinite(log10(dataset$PROPERTYSQFT)))# Check for Inf in PROPERTYSQFT
sum(is.infinite((dataset$BEDS)))             # Check for Inf in BEDS
sum(is.infinite((dataset$BATH)))             # Check for Inf in BATH
# Fit multiple linear regression models
lmod_11 <- lm(log10(PRICE) ~ log10(PROPERTYSQFT) + BEDS + BATH, data = dataset)
lmod_22 <- lm(log10(PRICE) ~ log10(PROPERTYSQFT) + BEDS, data = dataset)
lmod_33 <- lm(log10(PRICE) ~ BEDS + BATH, data = dataset)
# Display model summaries
summary(lmod_11)
summary(lmod_22)
summary(lmod_33)
# Define function to plot regression line and residuals for a chosen variable
plot_model <- function(model, data, var_name, model_name) {
# Scatter plot of predictor vs log10(PRICE) with regression line
ggplot(data, aes_string(x = paste0("log10(", var_name, ")"), y = "log10(PRICE)")) +
geom_point(alpha = 0.5, color = "green") +
stat_smooth(method = "lm", col = "orange", se = FALSE) +
labs(title = paste("Scatter plot of log10(", var_name, ") vs log10(PRICE) -", model_name),
x = paste("log10", var_name), y = "log10(PRICE)") +
theme_minimal() -> plot1
# Residuals vs Fitted plot
residuals_data <- data.frame(Fitted = fitted(model), Residuals = resid(model))
ggplot(residuals_data, aes(x = Fitted, y = Residuals)) +
geom_point(alpha = 0.5, color = "purple") +
geom_hline(yintercept = 0, linetype = "dashed", color = "orange") +
labs(title = paste("Residuals vs Fitted -", model_name),
x = "Fitted Values", y = "Residuals") +
theme_minimal() -> plot2
# Show both plots
print(plot1)
print(plot2)
}
# Generate plots for models using PROPERTYSQFT as the main predictor
plot_model(lmod_11, dataset, "PROPERTYSQFT", "lmod_11")
plot_model(lmod_22, dataset, "PROPERTYSQFT", "lmod_22")
# Scatter plot of BEDS vs log10(PRICE) with regression line
ggplot(dataset, aes(x = BEDS, y = log10(PRICE))) +
geom_point(alpha = 0.5, color = "pink") +
stat_smooth(method = "lm", col = "grey", se = FALSE) +
labs(title = "Regression: BEDS vs log10(PRICE) - Model lmod_33",
x = "Number of Beds", y = "log10(PRICE)") +
theme_minimal()
# Residuals vs Fitted plot for lmod_33
residuals_data <- data.frame(Fitted = fitted(lmod_33), Residuals = resid(lmod_33))
ggplot(residuals_data, aes(x = Fitted, y = Residuals)) +
geom_point(alpha = 0.5, color = "purple") +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
labs(title = "Residuals vs Fitted - Model lmod_33",
x = "Fitted Values", y = "Residuals") +
theme_minimal()
# Load required libraries
library("ggplot2")
library("readr")
# Import dataset
NY_House_Dataset <- read_csv("/Users/elizabethrice/Desktop/Data Analytics Labs/Lab2/NY-House-Dataset.csv")
View(NY_House_Dataset)
# Create working copy of dataset
dataset <- NY_House_Dataset
View(dataset)
# Import dataset
NY_House_Dataset <- read_csv("/Users/elizabethrice/Desktop/Data Analytics Labs/Lab2/NY-House-Dataset.csv")
View(NY_House_Dataset)
# Import dataset
NY-House-Dataset <- read_csv("/Users/elizabethrice/Desktop/Data Analytics Labs/Lab2/NY-House-Dataset.csv")
View(NY-House-Dataset)
NY
NY
# Import dataset
NY_House_Dataset <- read_csv("/Users/elizabethrice/Desktop/Data Analytics Labs/Lab2/NY-House-Dataset.csv")
View(NY_House_Dataset)
# Create working copy of dataset
dataset <- NY_House_Dataset
View(dataset)
# Create working copy of nydataset
nydataset <- NY_House_Dataset
View(nydataset)
attach(nydataset)
# Scatter plot of log10(PROPERTYSQFT) vs log10(PRICE)
ggplot(nydataset, aes(x = log10(PROPERTYSQFT), y = log10(PRICE))) +
geom_point()
# Filter extreme values from PRICE and remove outlier in PROPERTYSQFT
nydataset <- nydataset[nydataset$PRICE < 195000000,]
nydataset <- nydataset[nydataset$PROPERTYSQFT != 2184.207862,]
# Inspect specific PROPERTYSQFT values for a broker
nydataset$PROPERTYSQFT[nydataset$BROKERTITLE == "Brokered by Douglas Elliman - 575 Madison Ave"][85]
# Plot again after filtering
ggplot(nydataset, aes(x = log10(PROPERTYSQFT), y = log10(PRICE))) +
geom_point()
# View column names
names(nydataset)
# Explore relationships of predictors (BEDS, BATH) with PRICE
ggplot(nydataset, aes(x = BEDS, y = PRICE)) +
geom_point()
ggplot(nydataset, aes(x = BATH, y = PRICE)) +
geom_point()
# Additional filtering for outliers in PRICE, BEDS, and BATH
nydataset <- nydataset[nydataset$PRICE < 24500000,]
nydataset <- nydataset[nydataset$BEDS < 15,]
nydataset <- nydataset[nydataset$BATH < 15,]
# Remove rows with missing, zero, or invalid values before taking logs
nydataset <- nydataset[!is.na(nydataset$PRICE) &
!is.na(nydataset$PROPERTYSQFT) &
!is.na(nydataset$BEDS) &
!is.na(nydataset$BATH) &
nydataset$PROPERTYSQFT > 0 &
nydataset$PRICE > 0, ]
# Check for missing or invalid log values
colSums(is.na(nydataset))                      # Count missing values
sum(is.infinite(log10(nydataset$PRICE)))       # Check for Inf in PRICE
sum(is.infinite(log10(nydataset$PROPERTYSQFT)))# Check for Inf in PROPERTYSQFT
sum(is.infinite((nydataset$BEDS)))             # Check for Inf in BEDS
sum(is.infinite((nydataset$BATH)))             # Check for Inf in BATH
# Fit multiple linear regression models
lmod_11 <- lm(log10(PRICE) ~ log10(PROPERTYSQFT) + BEDS + BATH, data = nydataset)
lmod_22 <- lm(log10(PRICE) ~ log10(PROPERTYSQFT) + BEDS, data = nydataset)
lmod_33 <- lm(log10(PRICE) ~ BEDS + BATH, data = nydataset)
# Display model summaries
summary(lmod_11)
summary(lmod_22)
summary(lmod_33)
# Define function to plot regression line and residuals for a chosen variable
plot_model <- function(model, data, var_name, model_name) {
# Scatter plot of predictor vs log10(PRICE) with regression line
ggplot(data, aes_string(x = paste0("log10(", var_name, ")"), y = "log10(PRICE)")) +
geom_point(alpha = 0.5, color = "green") +
stat_smooth(method = "lm", col = "orange", se = FALSE) +
labs(title = paste("Scatter plot of log10(", var_name, ") vs log10(PRICE) -", model_name),
x = paste("log10", var_name), y = "log10(PRICE)") +
theme_minimal() -> plot1
# Residuals vs Fitted plot
residuals_data <- data.frame(Fitted = fitted(model), Residuals = resid(model))
ggplot(residuals_data, aes(x = Fitted, y = Residuals)) +
geom_point(alpha = 0.5, color = "purple") +
geom_hline(yintercept = 0, linetype = "dashed", color = "orange") +
labs(title = paste("Residuals vs Fitted -", model_name),
x = "Fitted Values", y = "Residuals") +
theme_minimal() -> plot2
# Show both plots
print(plot1)
print(plot2)
}
# Generate plots for models using PROPERTYSQFT as the main predictor
plot_model(lmod_11, nydataset, "PROPERTYSQFT", "lmod_11")
plot_model(lmod_22, nydataset, "PROPERTYSQFT", "lmod_22")
# Scatter plot of BEDS vs log10(PRICE) with regression line
ggplot(nydataset, aes(x = BEDS, y = log10(PRICE))) +
geom_point(alpha = 0.5, color = "pink") +
stat_smooth(method = "lm", col = "grey", se = FALSE) +
labs(title = "Regression: BEDS vs log10(PRICE) - Model lmod_33",
x = "Number of Beds", y = "log10(PRICE)") +
theme_minimal()
# Residuals vs Fitted plot for lmod_33
residuals_data <- data.frame(Fitted = fitted(lmod_33), Residuals = resid(lmod_33))
ggplot(residuals_data, aes(x = Fitted, y = Residuals)) +
geom_point(alpha = 0.5, color = "purple") +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
labs(title = "Residuals vs Fitted - Model lmod_33",
x = "Fitted Values", y = "Residuals") +
theme_minimal()
mod_33
mod_33
# Display model summaries
summary(lmod_11)
summary(lmod_22)
summary(mod3)
# Define function to plot regression line and residuals for a chosen variable
plot_model <- function(model, data, var_name, model_name) {
# Scatter plot of predictor vs log10(PRICE) with regression line
ggplot(data, aes_string(x = paste0("log10(", var_name, ")"), y = "log10(PRICE)")) +
geom_point(alpha = 0.5, color = "green") +
stat_smooth(method = "lm", col = "orange", se = FALSE) +
labs(title = paste("Scatter plot of log10(", var_name, ") vs log10(PRICE) -", model_name),
x = paste("log10", var_name), y = "log10(PRICE)") +
theme_minimal() -> plot1
# Residuals vs Fitted plot
residuals_data <- data.frame(Fitted = fitted(model), Residuals = resid(model))
ggplot(residuals_data, aes(x = Fitted, y = Residuals)) +
geom_point(alpha = 0.5, color = "purple") +
geom_hline(yintercept = 0, linetype = "dashed", color = "orange") +
labs(title = paste("Residuals vs Fitted -", model_name),
x = "Fitted Values", y = "Residuals") +
theme_minimal() -> plot2
# Show both plots
print(plot1)
print(plot2)
}
# Generate plots for models using PROPERTYSQFT as the main predictor
plot_model(lmod_11, nydataset, "PROPERTYSQFT", "lmod_11")
plot_model(lmod_22, nydataset, "PROPERTYSQFT", "lmod_22")
# Scatter plot of BEDS vs log10(PRICE) with regression line
ggplot(nydataset, aes(x = BEDS, y = log10(PRICE))) +
geom_point(alpha = 0.5, color = "pink") +
stat_smooth(method = "lm", col = "grey", se = FALSE) +
labs(title = "Regression: BEDS vs log10(PRICE) - Model mod3",
x = "Number of Beds", y = "log10(PRICE)") +
theme_minimal()
# Residuals vs Fitted plot for mod3
residuals_data <- data.frame(Fitted = fitted(mod3), Residuals = resid(mod3))
ggplot(residuals_data, aes(x = Fitted, y = Residuals)) +
geom_point(alpha = 0.5, color = "purple") +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
labs(title = "Residuals vs Fitted - Model mod3",
x = "Fitted Values", y = "Residuals") +
theme_minimal()
# Remove rows with missing, zero, or invalid values before taking logs
nydataset <- nydataset[!is.na(nydataset$PRICE) &
!is.na(nydataset$PROPERTYSQFT) &
!is.na(nydataset$BEDS) &
!is.na(nydataset$BATH) &
nydataset$PROPERTYSQFT > 0 &
nydataset$PRICE > 0, ]
# Check for missing or invalid log values
colSums(is.na(nydataset))                      # Count missing values
sum(is.infinite(log10(nydataset$PRICE)))       # Check for Inf in PRICE
sum(is.infinite(log10(nydataset$PROPERTYSQFT)))# Check for Inf in PROPERTYSQFT
sum(is.infinite((nydataset$BEDS)))             # Check for Inf in BEDS
sum(is.infinite((nydataset$BATH)))             # Check for Inf in BATH
# Fit multiple linear regression models
mod1 <- lm(log10(PRICE) ~ log10(PROPERTYSQFT) + BEDS + BATH, data = nydataset)
mod2 <- lm(log10(PRICE) ~ log10(PROPERTYSQFT) + BEDS, data = nydataset)
mod3 <- lm(log10(PRICE) ~ BEDS + BATH, data = nydataset)
# Display model summaries
summary(mod1)
summary(mod2)
summary(mod3)
# Define function to plot regression line and residuals for a chosen variable
plot_model <- function(model, data, var_name, model_name) {
# Scatter plot of predictor vs log10(PRICE) with regression line
ggplot(data, aes_string(x = paste0("log10(", var_name, ")"), y = "log10(PRICE)")) +
geom_point(alpha = 0.5, color = "green") +
stat_smooth(method = "lm", col = "orange", se = FALSE) +
labs(title = paste("Scatter plot of log10(", var_name, ") vs log10(PRICE) -", model_name),
x = paste("log10", var_name), y = "log10(PRICE)") +
theme_minimal() -> plot1
# Residuals vs Fitted plot
residuals_data <- data.frame(Fitted = fitted(model), Residuals = resid(model))
ggplot(residuals_data, aes(x = Fitted, y = Residuals)) +
geom_point(alpha = 0.5, color = "purple") +
geom_hline(yintercept = 0, linetype = "dashed", color = "orange") +
labs(title = paste("Residuals vs Fitted -", model_name),
x = "Fitted Values", y = "Residuals") +
theme_minimal() -> plot2
# Show both plots
print(plot1)
print(plot2)
}
# Generate plots for models using PROPERTYSQFT as the main predictor
plot_model(mod1, nydataset, "PROPERTYSQFT", "mod1")
plot_model(mod2, nydataset, "PROPERTYSQFT", "mod2")
# Scatter plot of BEDS vs log10(PRICE) with regression line
ggplot(nydataset, aes(x = BEDS, y = log10(PRICE))) +
geom_point(alpha = 0.5, color = "pink") +
stat_smooth(method = "lm", col = "grey", se = FALSE) +
labs(title = "Regression: BEDS vs log10(PRICE) - Model mod3",
x = "Number of Beds", y = "log10(PRICE)") +
theme_minimal()
# Residuals vs Fitted plot for mod3
residuals_data <- data.frame(Fitted = fitted(mod3), Residuals = resid(mod3))
ggplot(residuals_data, aes(x = Fitted, y = Residuals)) +
geom_point(alpha = 0.5, color = "purple") +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
labs(title = "Residuals vs Fitted - Model mod3",
x = "Fitted Values", y = "Residuals") +
theme_minimal()
# Display model summaries
summary(mod1)
summary(mod2)
summary(mod3)
# Define function to plot regression line and residuals for a chosen variable
plot_model <- function(model, data, var_name, model_name) {
# Scatter plot of predictor vs log10(PRICE) with regression line
ggplot(data, aes_string(x = paste0("log10(", var_name, ")"), y = "log10(PRICE)")) +
geom_point(alpha = 0.5, color = "green") +
stat_smooth(method = "lm", col = "orange", se = FALSE) +
labs(title = paste("Scatter plot of log10(", var_name, ") vs log10(PRICE) -", model_name),
x = paste("log10", var_name), y = "log10(PRICE)") +
theme_minimal() -> plot1
# Residuals vs Fitted plot
residuals_data <- data.frame(Fitted = fitted(model), Residuals = resid(model))
ggplot(residuals_data, aes(x = Fitted, y = Residuals)) +
geom_point(alpha = 0.5, color = "purple") +
geom_hline(yintercept = 0, linetype = "dashed", color = "orange") +
labs(title = paste("Residuals vs Fitted -", model_name),
x = "Fitted Values", y = "Residuals") +
theme_minimal() -> plot2
# Show both plots
print(plot1)
print(plot2)
}
# Generate plots for models using PROPERTYSQFT as the main predictor
plot_model(mod1, nydataset, "PROPERTYSQFT", "mod1")
plot_model(mod2, nydataset, "PROPERTYSQFT", "mod2")
# Scatter plot of BEDS vs log10(PRICE) with regression line
ggplot(nydataset, aes(x = BEDS, y = log10(PRICE))) +
geom_point(alpha = 0.5, color = "pink") +
stat_smooth(method = "lm", col = "grey", se = FALSE) +
labs(title = "Regression: BEDS vs log10(PRICE) - Model mod3",
x = "Number of Beds", y = "log10(PRICE)") +
theme_minimal()
# Residuals vs Fitted plot for mod3
residuals_data <- data.frame(Fitted = fitted(mod3), Residuals = resid(mod3))
ggplot(residuals_data, aes(x = Fitted, y = Residuals)) +
geom_point(alpha = 0.5, color = "purple") +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
labs(title = "Residuals vs Fitted - Model mod3",
x = "Fitted Values", y = "Residuals") +
theme_minimal()
